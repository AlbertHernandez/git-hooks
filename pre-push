#!/usr/bin/env node
const git = require('../../git');
const util = require('./util/util');

const tokenAuth = 'ae7808ada3d9133b6dfffceb4d661a0278ca1794';
const currentBranch = git.getCurrentBranch();

const notAllowedBranches = {
  staging: true,
  beta: true,
  master: true,
  // [currentBranch]: true,
};

const checkExistPRInBranches = arrayBranches => {

  arrayBranches.forEach(function(branch) {
    git.inicialize(tokenAuth).then(() => {
      git.existPullRequestInBranch(branch).then(
        responseExistPullRequestInBranch(branch),
      );
    });
  });
};

const getNonCreatedPRBranches = async arrayBranches => {
  await git.inicialize(tokenAuth);

  return await arrayBranches.filter(async function(branch) {
    return !(await git.existPullRequestInBranch(branch));
  });

  process.exit(1)

}



// const responseExistPullRequestInBranch = existePR => {
//   if (!existePR) {
//     console.log('branch: ', branch);
    
//     // console.log(
//     //   '\x1b[31m%s\x1b[0m',
//     //   '\n ERROR: Dont exist Pull Request in branch "' + branch + '", please, create first a Pull Request!',
//     // );
//     // process.exit(1);
//     return branch;
//   } else {
//     return ''
//   }
// };


const IDCommitNotPush = git.getIDCommitNotPushInBranch(currentBranch);

// console.log('IDCommitNotPush: ', IDCommitNotPush);


const branchArrayWithoutFilter = git.getBranchesContainsCommitID(IDCommitNotPush);

// console.log('branchArrayWithoutFilter: ', branchArrayWithoutFilter);

const branchArrayToCheckPR = util.removeNotAllowed(branchArrayWithoutFilter, notAllowedBranches);

console.log('branchArrayToCheckPR: ', branchArrayToCheckPR);


// checkExistPRInBranches(branchArrayToCheckPR);

// getNonCreate.dPRBranches(branchArrayToCheckPR)

// process.exit(1);









//COSAS DE TONI

// const blockPushIfNotPRCreated = () => {

// }

// const checkNonCreatedPR = async () => {
//   const branchesPendingToPush = getBranchesPendingToPush();
//   const nonCreatedPRBranches = await getNonCreatedPRBranches(branchesPendingToPush);
//   blockPushIfNotPRCreated(nonCreatedPRBranches);
// }

// checkNonCreatedPR();